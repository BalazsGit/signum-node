/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Keys;
import brs.schema.tables.records.LpAssetsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LpAssets extends TableImpl<LpAssetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.lp_assets</code>
     */
    public static final LpAssets LP_ASSETS = new LpAssets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LpAssetsRecord> getRecordType() {
        return LpAssetsRecord.class;
    }

    /**
     * The column <code>DB.lp_assets.db_id</code>.
     */
    public final TableField<LpAssetsRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.lp_assets.lp_id</code>.
     */
    public final TableField<LpAssetsRecord, Long> LP_ID = createField(DSL.name("lp_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.lp_assets.asset_id</code>.
     */
    public final TableField<LpAssetsRecord, Long> ASSET_ID = createField(DSL.name("asset_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.lp_assets.factor</code>.
     */
    public final TableField<LpAssetsRecord, Integer> FACTOR = createField(DSL.name("factor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.lp_assets.height</code>.
     */
    public final TableField<LpAssetsRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.lp_assets.latest</code>.
     */
    public final TableField<LpAssetsRecord, Boolean> LATEST = createField(DSL.name("latest"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    private LpAssets(Name alias, Table<LpAssetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private LpAssets(Name alias, Table<LpAssetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.lp_assets</code> table reference
     */
    public LpAssets(String alias) {
        this(DSL.name(alias), LP_ASSETS);
    }

    /**
     * Create an aliased <code>DB.lp_assets</code> table reference
     */
    public LpAssets(Name alias) {
        this(alias, LP_ASSETS);
    }

    /**
     * Create a <code>DB.lp_assets</code> table reference
     */
    public LpAssets() {
        this(DSL.name("lp_assets"), null);
    }

    public <O extends Record> LpAssets(Table<O> child, ForeignKey<O, LpAssetsRecord> key) {
        super(child, key, LP_ASSETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public Identity<LpAssetsRecord, Long> getIdentity() {
        return (Identity<LpAssetsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LpAssetsRecord> getPrimaryKey() {
        return Keys.KEY_LP_ASSETS_PRIMARY;
    }

    @Override
    public LpAssets as(String alias) {
        return new LpAssets(DSL.name(alias), this);
    }

    @Override
    public LpAssets as(Name alias) {
        return new LpAssets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LpAssets rename(String name) {
        return new LpAssets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LpAssets rename(Name name) {
        return new LpAssets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Integer, Integer, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
